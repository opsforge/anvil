{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ANViL is a DevOps toolkit and ecosystem that aims to enable engineers to have a consistent development environment on any platform and any system. It's meant to serve as a swiss army knife for most DevOps tasks, like automation, testing, scripting, etc. It achieves this by packing a lot of the most popular tools, but it doesn't stop there. Summary / Guidelines The opsforge anvil (a renaming of the opsforge stack 2.0) is an all-in-one development solution, that aims to deliver a development platform that is: using browser accessible web-apps (no terminal emulator or IDE needed / even on Windows) built on docker-native and container-based services structured and configured by docker-compose relying on OSS-only components swarm-compatible for scale-out needs (e.g larger dev environments) has in-built logging and audit (for collaboration and record keeping) highly customisable (modular) easly reproducable and replacable version controlled platform and infrastructure agnostic can run on localhost and AWS the same way Architecture ANViL runs on top of the Community Edition of Docker Engine. It can also run on Docker EE, although it's not required. It's also able to run on Kubernetes, however there are limitations in K8S related to disk mounting that have some impact on the functionality, so it's not officially supported. The project uses a simple shell script as a CLI to manage the required components. The shell script interacts with the docker engine of the host using the docker-compose Python library. This library is widely adopted and popular so extensive documentation is available for it, making the addition and editing of addons easier. Using compose, it stands up docker containers running the ANViL ecosystem. The minimum configuration is running ANViL and Consul . The addons are optional, but some of them are strongly recommended for optimal experience, like the Cloud9 IDE. All adopted services will be registered in service discovery within Consul. It's a free Hashicorp product that provides the aforementioned service discovery along with health checking the services. It's useful to give a birds-eye view from all running services within ANViL, but it's also helpful to find URLs or to code deeper automation mechanisms between services within ANViL. As mentioned, ANViL runs on Docker Engine. This pertains, that whatever can run Docker Engine, can in turn run Docker. Natively supported are: MacOS (preferred) Linux (just as good, but less desktop tools are available) AWS (using ECS or a Linux EC2 instance) Azure GCP ..etc The constraint for native support is to be able to run Docker Engine. There's also a compatibility mode available using Vagrant. It moves the platform abstraction one layer below and instead requiring the ability to run Docker natively on the host, it creates a VM on the host that can run Docker. The reason why this isn't the preferred / optimal usage is because the maintenance and understanding the VM requires. There's also the factor of the resource locks the VM receives from the host instead of sharing the resources. However this mode enables engineers to run ANViL 'behind enemy lines' so to speak, whereas anything that has the ability to run VT-d / VT-x or equivalent becomes a viable platform (including legacy OSes). Using Vagrant ensures that wherever Vagrant can run on whichever virtualization product, the UX will be the same. It's also a lot quicker to stand up the VM using Vagrant. Here's an overview of the architecture:","title":"Home"},{"location":"#summary-guidelines","text":"The opsforge anvil (a renaming of the opsforge stack 2.0) is an all-in-one development solution, that aims to deliver a development platform that is: using browser accessible web-apps (no terminal emulator or IDE needed / even on Windows) built on docker-native and container-based services structured and configured by docker-compose relying on OSS-only components swarm-compatible for scale-out needs (e.g larger dev environments) has in-built logging and audit (for collaboration and record keeping) highly customisable (modular) easly reproducable and replacable version controlled platform and infrastructure agnostic can run on localhost and AWS the same way","title":"Summary / Guidelines"},{"location":"#architecture","text":"ANViL runs on top of the Community Edition of Docker Engine. It can also run on Docker EE, although it's not required. It's also able to run on Kubernetes, however there are limitations in K8S related to disk mounting that have some impact on the functionality, so it's not officially supported. The project uses a simple shell script as a CLI to manage the required components. The shell script interacts with the docker engine of the host using the docker-compose Python library. This library is widely adopted and popular so extensive documentation is available for it, making the addition and editing of addons easier. Using compose, it stands up docker containers running the ANViL ecosystem. The minimum configuration is running ANViL and Consul . The addons are optional, but some of them are strongly recommended for optimal experience, like the Cloud9 IDE. All adopted services will be registered in service discovery within Consul. It's a free Hashicorp product that provides the aforementioned service discovery along with health checking the services. It's useful to give a birds-eye view from all running services within ANViL, but it's also helpful to find URLs or to code deeper automation mechanisms between services within ANViL. As mentioned, ANViL runs on Docker Engine. This pertains, that whatever can run Docker Engine, can in turn run Docker. Natively supported are: MacOS (preferred) Linux (just as good, but less desktop tools are available) AWS (using ECS or a Linux EC2 instance) Azure GCP ..etc The constraint for native support is to be able to run Docker Engine. There's also a compatibility mode available using Vagrant. It moves the platform abstraction one layer below and instead requiring the ability to run Docker natively on the host, it creates a VM on the host that can run Docker. The reason why this isn't the preferred / optimal usage is because the maintenance and understanding the VM requires. There's also the factor of the resource locks the VM receives from the host instead of sharing the resources. However this mode enables engineers to run ANViL 'behind enemy lines' so to speak, whereas anything that has the ability to run VT-d / VT-x or equivalent becomes a viable platform (including legacy OSes). Using Vagrant ensures that wherever Vagrant can run on whichever virtualization product, the UX will be the same. It's also a lot quicker to stand up the VM using Vagrant. Here's an overview of the architecture:","title":"Architecture"},{"location":"about/","text":"","title":"About Us"},{"location":"license/","text":"","title":"License"},{"location":"addons/cloud9/","text":"","title":"Cloud9 IDE"},{"location":"addons/concourse4/","text":"","title":"Concourse 4"},{"location":"addons/consul/","text":"","title":"Consul"},{"location":"addons/deskible/","text":"","title":"Deskible"},{"location":"addons/elk/","text":"","title":"ELK"},{"location":"addons/guac/","text":"","title":"Guacamole"},{"location":"addons/portainer/","text":"","title":"Portainer"},{"location":"addons/splunk/","text":"","title":"Splunk"},{"location":"addons/theia/","text":"","title":"Theia"},{"location":"addons/wekan/","text":"","title":"Wekand"},{"location":"anvil-features/anvil_tools/","text":"","title":"anvil Tools"},{"location":"anvil-features/logging/","text":"","title":"Logging"},{"location":"anvil-features/port_forwarding/","text":"","title":"Port Forwarding"},{"location":"anvil-features/remote_shell/","text":"","title":"Remote Shell"},{"location":"anvil-features/service_discovery/","text":"","title":"Service Discovery"},{"location":"anvil-features/shell_source/","text":"","title":"Shell Source"},{"location":"getting-started/anvil-bootstrapper/bootstrapper_howto/","text":"","title":"How-to"},{"location":"getting-started/anvil-bootstrapper/consul_integration/","text":"","title":"Consul integration"},{"location":"getting-started/anvil-bootstrapper/service_management/","text":"","title":"Service Management"},{"location":"getting-started/installation/aws/","text":"TBD","title":"AWS"},{"location":"getting-started/installation/linux/","text":"You will need Python PIP installed so if you don't have that, follow https://pip.pypa.io/en/stable/installing/ Follow the Linux distro's instructions you have on https://docs.docker.com/install/ Open your terminal Type pip install docker-compose and press Enter Open the ANViL git repo on https://github.com/opsforge/anvil If you have GIT installed on your Mac, clone the project If you don't have GIT, download in a ZIP and extract to your preferred location Either way, in your terminal cd into the folder you have ANViL in Use the bootstrapper to start up the stack with the following command: ./anvil.sh That's the install done. You can stop and terminate ANViL containers any time using ./anvil.sh --destroy from the ANViL project folder. Some ANViL containers persist data on the host using mounts, this is so that you can see / back-up / restore / delete the data they keep easily without having to deal with Docker volumes. If you are using the project in GIT mode and are making commits, these are excluded by the .gitignore file by default. If for some reason you want to keep them in GIT (not one to judge), you can comment out the ignores.","title":"Linux"},{"location":"getting-started/installation/macos/","text":"You will need Python PIP installed so if you don't have that, follow https://pip.pypa.io/en/stable/installing/ or use brew to install it. Follow https://docs.docker.com/docker-for-mac/install/ to install docker on MacOS (recommended sizes are 64GB disk, 2 cpus, at least 2GB ram, 1GB swap) Open your terminal Type pip install docker-compose and press Enter Open the ANViL git repo on https://github.com/opsforge/anvil If you have GIT installed on your Mac, clone the project If you don't have GIT, download in a ZIP and extract to your preferred location Either way, in your terminal cd into the folder you have ANViL in Use the bootstrapper to start up the stack with the following command: ./anvil.sh That's the install done. You can stop and terminate ANViL containers any time using ./anvil.sh --destroy from the ANViL project folder. Some ANViL containers persist data on the host using mounts, this is so that you can see / back-up / restore / delete the data they keep easily without having to deal with Docker volumes. If you are using the project in GIT mode and are making commits, these are excluded by the .gitignore file by default. If for some reason you want to keep them in GIT (not one to judge), you can comment out the ignores.","title":"MacOS"},{"location":"getting-started/installation/windows/","text":"TBD","title":"Windows"},{"location":"overview/functionality/","text":"Some of the functionality ANViL includes (but is by no means limited to): Testing or compiling code on your development environment with no consequences (throw it out by re-creating the container) Accessing the host's Docker Engine from the browser on the Remote Shell and create new containers or kill existing ones Install any Linux package on the ANViL Shell and use them Compile and use your own Docker image for Remote Shell adding extra binaries or removing ones you don't need Using plugins like Splunk or ELK, where no configuration is required and all of them are fully functional right after startup RDP to other machines using Guacamole from your browser Ship logs from the ANViL Shell to ELK or Splunk for review or audit. This includes your shell output if you need it. No more CTRL+R or history grepping needed. Have any amount shells open in individual browser windows or use screen and tmux to keep them in one. Remember, that all ANViL components are open-source, including the Docker images used, so if you want to change anything or add your own, you have all that you need at your disposal.","title":"Functionality"}]}